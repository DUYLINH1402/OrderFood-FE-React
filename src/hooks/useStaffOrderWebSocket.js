// src/hooks/useStaffOrderWebSocket.js
import { useEffect, useRef, useCallback, useState } from "react";
import { useSelector } from "react-redux";
import { toast } from "react-toastify";
import staffOrderWebSocketService from "../services/websocket/StaffOrderWebSocketService";

/**
 * Hook ƒë·ªÉ qu·∫£n l√Ω WebSocket connection cho Staff Orders
 * T·ª± ƒë·ªông k·∫øt n·ªëi khi component mount v√† ng·∫Øt k·∫øt n·ªëi khi unmount
 */
export const useStaffOrderWebSocket = () => {
  const [connectionStatus, setConnectionStatus] = useState({
    connected: false,
    connecting: false,
    error: null,
  });

  // L·∫•y th√¥ng tin user t·ª´ Redux store
  const { user, accessToken: token } = useSelector((state) => state.auth);

  // Ref ƒë·ªÉ l∆∞u c√°c handlers v√† tr√°nh memory leaks
  const handlersRef = useRef(new Map());
  const connectingRef = useRef(false);

  /**
   * K·∫øt n·ªëi WebSocket
   */
  const connect = useCallback(async () => {
    if (!user?.id || !token) {
      console.warn("Thi·∫øu user ID ho·∫∑c token:", { userId: user?.id, hasToken: !!token });
      return;
    }

    if (connectingRef.current || staffOrderWebSocketService.isConnected()) {
      console.log("WebSocket ƒëang k·∫øt n·ªëi ho·∫∑c ƒë√£ k·∫øt n·ªëi");
      return;
    }

    connectingRef.current = true;
    setConnectionStatus((prev) => ({ ...prev, connecting: true, error: null }));
    try {
      await staffOrderWebSocketService.connect(user.id.toString(), token);

      // Subscribe v√†o c√°c topic sau khi k·∫øt n·ªëi th√†nh c√¥ng
      staffOrderWebSocketService.subscribeToOrderUpdates();

      setConnectionStatus({
        connected: true,
        connecting: false,
        error: null,
      });
    } catch (error) {
      console.error("üí• L·ªói k·∫øt n·ªëi WebSocket:", error);
      setConnectionStatus({
        connected: false,
        connecting: false,
        error: error.message,
      });

      toast.error(`‚ùå L·ªói k·∫øt n·ªëi WebSocket: ${error.message}`, {
        position: "top-right",
        autoClose: 8000,
      });
    } finally {
      connectingRef.current = false;
    }
  }, [user?.id, token]);

  /**
   * Ng·∫Øt k·∫øt n·ªëi WebSocket
   */
  const disconnect = useCallback(() => {
    staffOrderWebSocketService.disconnect();
    setConnectionStatus({
      connected: false,
      connecting: false,
      error: null,
    });

    // Clear t·∫•t c·∫£ handlers
    handlersRef.current.clear();

    console.log(" ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket");
  }, []);

  /**
   * Th√™m handler cho message type
   */
  const addMessageHandler = useCallback((messageType, handler) => {
    const unsubscribe = staffOrderWebSocketService.addMessageHandler(messageType, handler);

    // L∆∞u unsubscribe function ƒë·ªÉ cleanup sau
    if (!handlersRef.current.has(messageType)) {
      handlersRef.current.set(messageType, new Set());
    }
    handlersRef.current.get(messageType).add(unsubscribe);

    return unsubscribe;
  }, []);

  /**
   * X√≥a handler cho message type
   */
  const removeHandlers = useCallback((messageType) => {
    const unsubscribers = handlersRef.current.get(messageType);
    if (unsubscribers) {
      unsubscribers.forEach((unsubscribe) => unsubscribe());
      handlersRef.current.delete(messageType);
    }
  }, []);

  /**
   * X√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng
   */
  const acknowledgeOrder = useCallback((orderId) => {
    return staffOrderWebSocketService.acknowledgeOrder(orderId);
  }, []);

  /**
   * Y√™u c·∫ßu chi ti·∫øt ƒë∆°n h√†ng
   */
  const requestOrderDetails = useCallback((orderId) => {
    return staffOrderWebSocketService.requestOrderDetails(orderId);
  }, []);

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
   */
  const updateOrderStatus = useCallback((orderId, orderCode, newStatus, previousStatus) => {
    return staffOrderWebSocketService.updateOrderStatus(
      orderId,
      orderCode,
      newStatus,
      previousStatus
    );
  }, []);

  // T·ª± ƒë·ªông k·∫øt n·ªëi khi component mount
  useEffect(() => {
    if (user?.id && token) {
      connect();
    }

    // Cleanup khi component unmount
    return () => {
      // Clear t·∫•t c·∫£ handlers
      handlersRef.current.forEach((unsubscribers) => {
        unsubscribers.forEach((unsubscribe) => unsubscribe());
      });
      handlersRef.current.clear();

      // Ng·∫Øt k·∫øt n·ªëi
      disconnect();
    };
  }, [user?.id, token, connect, disconnect]);

  // T·ª± ƒë·ªông reconnect khi user ho·∫∑c token thay ƒë·ªïi
  useEffect(() => {
    if (user?.id && token && !staffOrderWebSocketService.isConnected() && !connectingRef.current) {
      connect();
    }
  }, [user?.id, token, connect]);

  return {
    // Tr·∫°ng th√°i k·∫øt n·ªëi
    ...connectionStatus,

    // C√°c h√†m ti·ªán √≠ch
    connect,
    disconnect,
    addMessageHandler,
    removeHandlers,

    // C√°c h√†m g·ª≠i message
    acknowledgeOrder,
    requestOrderDetails,
    updateOrderStatus,

    // Th√¥ng tin tr·∫°ng th√°i
    // status: staffOrderWebSocketService.getStatus(),
  };
};
