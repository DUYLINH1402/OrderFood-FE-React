import axios from "axios";
import { store } from "../store";
import { logout } from "../store/slices/authSlice";
import { toast } from "react-toastify";

const BASE_URL = import.meta.env.VITE_API_BASE_URL;

// T·∫°o axios instance cho API c·∫ßn authentication
const apiClient = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// T·∫°o axios instance cho API c√¥ng khai (kh√¥ng c·∫ßn token)
const publicClient = axios.create({
  baseURL: BASE_URL,
  timeout: 10000, // Tr√°nh request b·ªã "treo" v√¥ h·∫°n
  headers: {
    "Content-Type": "application/json",
  },
});

// Request interceptor cho apiClient - th√™m token v√†o header
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("accessToken");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Log for debugging
    if (config.url && config.url.includes("/notifications/staff/")) {
      console.log("üîë Staff notification API request:", {
        method: config.method?.toUpperCase(),
        url: config.url,
        hasToken: !!token,
        headers: config.headers,
      });
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor - x·ª≠ l√Ω token h·∫øt h·∫°n
apiClient.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const { response } = error;

    // X·ª≠ l√Ω l·ªói authentication (401, 403)
    if (response?.status === 401 || response?.status === 403) {
      const errorCode = response.data?.errorCode;
      // Ki·ªÉm tra n·∫øu l√† JWT token expired/invalid
      if (
        errorCode === "JWT_TOKEN_EXPIRED" ||
        errorCode === "JWT_TOKEN_INVALID" ||
        response.status === 403
      ) {
        // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá - t·ª± ƒë·ªông ƒëƒÉng xu·∫•t
        toast.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!", {
          autoClose: 5000, // Hi·ªÉn th·ªã 5 gi√¢y
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
        });

        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu x√°c th·ª±c
        localStorage.removeItem("accessToken");
        localStorage.removeItem("user");
        localStorage.removeItem("cartItems");

        // Dispatch logout action
        store.dispatch(logout());

        // Delay ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë·ªçc th√¥ng b√°o tr∆∞·ªõc khi redirect
        setTimeout(() => {
          window.location.href = "/dang-nhap";
        }, 2000);
      } else {
        // C√°c l·ªói 401 kh√°c
        toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p!");
      }
    } else if (response?.status >= 500) {
      toast.error("L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau!");
    }

    return Promise.reject(error);
  }
);

// Response interceptor cho publicClient - x·ª≠ l√Ω l·ªói server
publicClient.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const { response } = error;

    if (response?.status >= 500) {
      toast.error("L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau!");
    }

    return Promise.reject(error);
  }
);

export default apiClient;
export { publicClient, apiClient };
