import React, { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { toast } from "react-toastify";
import { useAuth, usePermissions } from "../../hooks/auth/useAuth";
import { useStaffOrderWebSocket } from "../../hooks/useStaffOrderWebSocket";
import { PERMISSIONS } from "../../utils/roleConfig";
import {
  ORDER_STATUS,
  ORDER_STATUS_LABELS,
  ORDER_STATUS_CONFIG,
} from "../../constants/orderConstants";
import OrderDetailModal from "../../components/OrderDetailModal";

const StaffOrders = () => {
  const { hasPermission } = usePermissions();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("ALL");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showOrderDetail, setShowOrderDetail] = useState(false);
  const [stats, setStats] = useState({
    totalOrders: 0,
    pendingOrders: 0,
    preparingOrders: 0,
    completedOrders: 0,
  });
  const [dateFilter, setDateFilter] = useState({
    from: "",
    to: "",
  });

  // S·ª≠ d·ª•ng WebSocket hook
  const {
    connected: wsConnected,
    connecting: wsConnecting,
    error: wsError,
    addMessageHandler,
    removeHandlers,
    acknowledgeOrder,
    requestOrderDetails,
    updateOrderStatus,
    ping,
    status: wsStatus,
  } = useStaffOrderWebSocket();

  // X·ª≠ l√Ω ƒë∆°n h√†ng m·ªõi t·ª´ WebSocket
  const handleNewOrder = useCallback(
    (orderData) => {
      console.log("üÜï Nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng m·ªõi:", orderData);

      // Hi·ªÉn th·ªã th√¥ng b√°o
      toast.info(`üõí ƒê∆°n h√†ng m·ªõi: ${orderData.orderCode}`, {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        onClick: () => {
          // C√≥ th·ªÉ m·ªü modal chi ti·∫øt ƒë∆°n h√†ng
          requestOrderDetails(orderData.orderId);
        },
      });

      // C·∫≠p nh·∫≠t danh s√°ch ƒë∆°n h√†ng
      setOrders((prevOrders) => [orderData, ...prevOrders]);

      // C·∫≠p nh·∫≠t th·ªëng k√™
      setStats((prev) => ({
        ...prev,
        totalOrders: prev.totalOrders + 1,
        pendingOrders: prev.pendingOrders + 1,
      }));

      // T·ª± ƒë·ªông x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng
      acknowledgeOrder(orderData.orderId);
    },
    [requestOrderDetails, acknowledgeOrder]
  );

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ WebSocket
  const handleOrderStatusUpdate = useCallback((updateData) => {
    console.log("üì¶ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", updateData);

    // Hi·ªÉn th·ªã th√¥ng b√°o
    toast.info(
      `üì¶ ${updateData.orderCode}: ${updateData.previousStatus} ‚Üí ${updateData.orderStatus}`,
      {
        position: "top-right",
        autoClose: 4000,
      }
    );

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng trong danh s√°ch
    setOrders((prevOrders) =>
      prevOrders.map((order) =>
        order.id === updateData.orderId
          ? { ...order, status: updateData.orderStatus, updatedAt: new Date() }
          : order
      )
    );

    // C·∫≠p nh·∫≠t th·ªëng k√™ (t√πy v√†o tr·∫°ng th√°i)
    setStats((prev) => {
      const newStats = { ...prev };

      // Gi·∫£m s·ªë l∆∞·ª£ng tr·∫°ng th√°i c≈©
      if (updateData.previousStatus === ORDER_STATUS.PENDING) {
        newStats.pendingOrders = Math.max(0, prev.pendingOrders - 1);
      } else if (updateData.previousStatus === ORDER_STATUS.PREPARING) {
        newStats.preparingOrders = Math.max(0, prev.preparingOrders - 1);
      }

      // TƒÉng s·ªë l∆∞·ª£ng tr·∫°ng th√°i m·ªõi
      if (updateData.orderStatus === ORDER_STATUS.PENDING) {
        newStats.pendingOrders = prev.pendingOrders + 1;
      } else if (updateData.orderStatus === ORDER_STATUS.PREPARING) {
        newStats.preparingOrders = prev.preparingOrders + 1;
      } else if (updateData.orderStatus === ORDER_STATUS.DELIVERED) {
        newStats.completedOrders = prev.completedOrders + 1;
      }

      return newStats;
    });
  }, []);

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t th·ªëng k√™ t·ª´ WebSocket
  const handleStatsUpdate = useCallback((statsData) => {
    console.log("üìä C·∫≠p nh·∫≠t th·ªëng k√™:", statsData);
    if (statsData && typeof statsData === "object") {
      setStats((prevStats) => ({ ...prevStats, ...statsData }));
    }
  }, []);

  // X·ª≠ l√Ω chi ti·∫øt ƒë∆°n h√†ng t·ª´ WebSocket
  const handleOrderDetails = useCallback((detailsData) => {
    console.log("üìã Nh·∫≠n chi ti·∫øt ƒë∆°n h√†ng:", detailsData);
    // C√≥ th·ªÉ m·ªü modal chi ti·∫øt ho·∫∑c c·∫≠p nh·∫≠t state
  }, []);

  // Setup WebSocket handlers
  useEffect(() => {
    if (wsConnected) {
      console.log("üîó ƒê√£ k·∫øt n·ªëi WebSocket, ƒëƒÉng k√Ω handlers");

      // ƒêƒÉng k√Ω c√°c message handlers
      const unsubscribeNewOrder = addMessageHandler("newOrder", handleNewOrder);
      const unsubscribeOrderUpdate = addMessageHandler(
        "orderStatusUpdate",
        handleOrderStatusUpdate
      );
      const unsubscribeStats = addMessageHandler("statsUpdate", handleStatsUpdate);
      const unsubscribeDetails = addMessageHandler("orderDetails", handleOrderDetails);

      // Cleanup khi component unmount ho·∫∑c websocket disconnect
      return () => {
        unsubscribeNewOrder();
        unsubscribeOrderUpdate();
        unsubscribeStats();
        unsubscribeDetails();
      };
    }
  }, [
    wsConnected,
    handleNewOrder,
    handleOrderStatusUpdate,
    handleStatsUpdate,
    handleOrderDetails,
    addMessageHandler,
  ]);

  useEffect(() => {
    if (hasPermission(PERMISSIONS.VIEW_ORDERS)) {
      fetchOrders();
    } else {
      setError("B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ƒë∆°n h√†ng");
      setLoading(false);
    }
  }, []);

  const fetchOrders = async () => {
    try {
      setLoading(true);
      // Gi·∫£ ƒë·ªãnh c√≥ API getAllOrders cho staff
      // const response = await getAllOrdersForStaff();
      // T·∫°m th·ªùi d√πng d·ªØ li·ªáu m·∫´u ƒë·ªÉ test WebSocket
      const sampleOrders = [
        {
          id: 1,
          orderCode: "ORD001",
          receiverName: "Nguy·ªÖn VƒÉn A",
          receiverPhone: "0123456789",
          totalPrice: 250000,
          status: ORDER_STATUS.PENDING,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
        {
          id: 2,
          orderCode: "ORD002",
          receiverName: "Tr·∫ßn Th·ªã B",
          receiverPhone: "0987654321",
          totalPrice: 350000,
          status: ORDER_STATUS.PREPARING,
          createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 gi·ªù tr∆∞·ªõc
          updatedAt: new Date(Date.now() - 3600000).toISOString(),
        },
      ];

      setOrders(sampleOrders);

      // C·∫≠p nh·∫≠t th·ªëng k√™ ban ƒë·∫ßu
      setStats({
        totalOrders: sampleOrders.length,
        pendingOrders: sampleOrders.filter((o) => o.status === ORDER_STATUS.PENDING).length,
        preparingOrders: sampleOrders.filter((o) => o.status === ORDER_STATUS.PREPARING).length,
        completedOrders: sampleOrders.filter((o) => o.status === ORDER_STATUS.DELIVERED).length,
      });
    } catch (err) {
      console.error("Error fetching orders:", err);
      setError("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch ƒë∆°n h√†ng");
    } finally {
      setLoading(false);
    }
  };

  const handleViewOrder = (order) => {
    setSelectedOrder(order);
    setShowOrderDetail(true);
    // Y√™u c·∫ßu chi ti·∫øt ƒë∆°n h√†ng qua WebSocket
    requestOrderDetails(order.id);
  };

  // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  const handleUpdateOrderStatus = async (orderId, orderCode, newStatus) => {
    const currentOrder = orders.find((o) => o.id === orderId);
    if (!currentOrder) return;

    const previousStatus = currentOrder.status;

    // C·∫≠p nh·∫≠t qua WebSocket
    const success = updateOrderStatus(orderId, orderCode, newStatus, previousStatus);

    if (success) {
      toast.success(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ${orderCode}`);
    } else {
      toast.error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng");
    }
  };

  // H√†m test ping WebSocket
  const handlePing = () => {
    const success = ping();
    if (success) {
      toast.info("üèì ƒê√£ g·ª≠i ping ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi");
    } else {
      toast.error("‚ùå Kh√¥ng th·ªÉ ping - WebSocket ch∆∞a k·∫øt n·ªëi");
    }
  };

  const getStatusBadge = (status) => {
    const config = ORDER_STATUS_CONFIG[status] || ORDER_STATUS_CONFIG[ORDER_STATUS.PENDING];
    return (
      <span
        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bgColor} ${config.color}`}>
        {config.label}
      </span>
    );
  };

  const filteredOrders = orders.filter((order) => {
    const matchesSearch =
      order.orderCode?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.receiverName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.receiverPhone?.includes(searchTerm);
    const matchesStatus = selectedStatus === "ALL" || order.status === selectedStatus;

    let matchesDate = true;
    if (dateFilter.from && dateFilter.to) {
      const orderDate = new Date(order.createdAt);
      const fromDate = new Date(dateFilter.from);
      const toDate = new Date(dateFilter.to);
      matchesDate = orderDate >= fromDate && orderDate <= toDate;
    }

    return matchesSearch && matchesStatus && matchesDate;
  });

  if (!hasPermission(PERMISSIONS.VIEW_ORDERS)) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
          <p className="text-base text-gray-600">B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ƒë∆°n h√†ng.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* Header */}
        <div className="mb-8">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-xl font-bold text-gray-900 mb-2">Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
              <p className="text-base text-gray-600">Theo d√µi v√† x·ª≠ l√Ω ƒë∆°n h√†ng real-time</p>
            </div>

            {/* WebSocket Status */}
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div
                  className={`w-3 h-3 rounded-full ${
                    wsConnected
                      ? "bg-green-500 animate-pulse"
                      : wsConnecting
                      ? "bg-yellow-500 animate-pulse"
                      : "bg-red-500"
                  }`}></div>
                <span className="text-sm text-gray-600">
                  {wsConnected ? "ƒê√£ k·∫øt n·ªëi" : wsConnecting ? "ƒêang k·∫øt n·ªëi..." : "M·∫•t k·∫øt n·ªëi"}
                </span>
              </div>

              {/* Ping button */}
              {wsConnected && (
                <button
                  onClick={handlePing}
                  className="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors">
                  üèì Ping
                </button>
              )}
            </div>
          </div>

          {/* WebSocket Error */}
          {wsError && (
            <div className="mt-4 bg-red-50 border border-red-200 rounded-md p-3">
              <p className="text-red-800 text-sm">‚ö†Ô∏è L·ªói WebSocket: {wsError}</p>
            </div>
          )}

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
            <div className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                    <span className="text-white text-sm font-semibold">üìù</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">T·ªïng ƒë∆°n h√†ng</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.totalOrders}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-yellow-500 rounded-md flex items-center justify-center">
                    <span className="text-white text-sm font-semibold">‚è≥</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Ch·ªù x·ª≠ l√Ω</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.pendingOrders}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                    <span className="text-white text-sm font-semibold">üë®‚Äçüç≥</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">ƒêang chu·∫©n b·ªã</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.preparingOrders}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                    <span className="text-white text-sm font-semibold">‚úÖ</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Ho√†n th√†nh</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.completedOrders}</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-lg shadow mb-6 p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">T√¨m ki·∫øm</label>
              <input
                type="text"
                placeholder="M√£ ƒë∆°n, t√™n kh√°ch h√†ng, SƒêT..."
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Tr·∫°ng th√°i</label>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-base">
                <option value="ALL">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value={ORDER_STATUS.PENDING}>Ch·ªù x√°c nh·∫≠n</option>
                <option value={ORDER_STATUS.CONFIRMED}>ƒê√£ x√°c nh·∫≠n</option>
                <option value={ORDER_STATUS.PREPARING}>ƒêang chu·∫©n b·ªã</option>
                <option value={ORDER_STATUS.SHIPPING}>ƒêang giao h√†ng</option>
                <option value={ORDER_STATUS.DELIVERED}>ƒê√£ giao h√†ng</option>
                <option value={ORDER_STATUS.CANCELLED}>ƒê√£ h·ªßy</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">T·ª´ ng√†y</label>
              <input
                type="date"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
                value={dateFilter.from}
                onChange={(e) => setDateFilter((prev) => ({ ...prev, from: e.target.value }))}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">ƒê·∫øn ng√†y</label>
              <input
                type="date"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
                value={dateFilter.to}
                onChange={(e) => setDateFilter((prev) => ({ ...prev, to: e.target.value }))}
              />
            </div>
          </div>
        </div>

        {/* Orders List */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">
              Danh s√°ch ƒë∆°n h√†ng ({filteredOrders.length})
            </h3>
          </div>

          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-2 text-gray-600 text-base">ƒêang t·∫£i...</span>
            </div>
          ) : error ? (
            <div className="bg-red-50 border border-red-200 rounded-md p-4 m-6">
              <p className="text-red-800 text-base">{error}</p>
            </div>
          ) : filteredOrders.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 text-base">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      M√£ ƒë∆°n h√†ng
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Kh√°ch h√†ng
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      T·ªïng ti·ªÅn
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Tr·∫°ng th√°i
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Th·ªùi gian
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Thao t√°c
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredOrders.map((order) => (
                    <tr key={order.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900 text-sm">#{order.orderCode}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {order.receiverName || "N/A"}
                          </div>
                          <div className="text-sm text-gray-500">
                            {order.receiverPhone || "N/A"}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {order.totalPrice?.toLocaleString()} VNƒê
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getStatusBadge(order.status)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(order.createdAt).toLocaleString("vi-VN")}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center space-x-3">
                          <button
                            onClick={() => handleViewOrder(order)}
                            className="text-blue-600 hover:text-blue-900 font-medium">
                            Xem chi ti·∫øt
                          </button>

                          {/* Update Status Buttons */}
                          {order.status === ORDER_STATUS.PENDING && (
                            <button
                              onClick={() =>
                                handleUpdateOrderStatus(
                                  order.id,
                                  order.orderCode,
                                  ORDER_STATUS.PREPARING
                                )
                              }
                              className="text-green-600 hover:text-green-900 font-medium">
                              X√°c nh·∫≠n
                            </button>
                          )}

                          {order.status === ORDER_STATUS.PREPARING && (
                            <button
                              onClick={() =>
                                handleUpdateOrderStatus(
                                  order.id,
                                  order.orderCode,
                                  ORDER_STATUS.DELIVERED
                                )
                              }
                              className="text-purple-600 hover:text-purple-900 font-medium">
                              Ho√†n th√†nh
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Order Detail Modal */}
      {showOrderDetail && selectedOrder && (
        <OrderDetailModal
          order={selectedOrder}
          isOpen={showOrderDetail}
          onClose={() => {
            setShowOrderDetail(false);
            setSelectedOrder(null);
          }}
        />
      )}
    </div>
  );
};

export default StaffOrders;
